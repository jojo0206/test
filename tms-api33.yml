openapi: 3.0.3
info:
  title: OaaSIS TMS Server API
  version: v1
  description: 'OaaSIS TMS Server API'
  contact:
    name: omelet
    url: https://omelet.ai/contact-us
    email: info@omelet.ai

servers:
  - url: http://localhost:9090
    description: Development server



paths:
  /api/admin/users:
    get:
      description: 사용자 조회
      operationId: listUsers
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/LoginIdParam'
        - $ref: '#/components/parameters/UsernameParam'
        - $ref: '#/components/parameters/BusinessNumberParam'
        - $ref: '#/components/parameters/LevelParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          $ref: '#/components/responses/UserListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      description: 사용자 정보 수정
      operationId: modifyUser
      tags:
        - Admin
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/users/{userId}:
    get:
      description: 사용자 조회
      operationId: getUser
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  # TO-DO: role 이 아니다 수정 필요. 사용자 제한 설정이다.
  /api/admin/user-roles:
    get:
      description: 사용자 권한 조회
      operationId: listUserRoles
      tags:
        - Admin
      responses:
        '200':
          $ref: '#/components/responses/UserRoleListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      description: 사용자 권한 수정
      operationId: modifyUserRole
      tags:
        - Admin
      requestBody:
        $ref: '#/components/requestBodies/UserRolesRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/routes:
    get:
      description: 경로 조회
      operationId: listRoutesByUser
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/OrderIdsParam' # deprecated
        - $ref: '#/components/parameters/UsernameParam'
        - $ref: '#/components/parameters/EmailParam'
        - $ref: '#/components/parameters/StartDateTimeParam'
        - $ref: '#/components/parameters/EndDateTimeParam'
      responses:
        '200':
          $ref: '#/components/responses/RouteListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      description: 경로 삭제
      operationId: deleteRoute
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/RouteIdsParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/routes/optimization:
    post:
      description: 경로 최적화
      operationId: optimizeRoute
      tags:
        - Route
      requestBody:
        $ref: '#/components/requestBodies/RouteOptimizationRequest'
      responses:
        '200':
          $ref: '#/components/responses/RouteOptimizationJobIdResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/routes/optimization/{jobId}/status:
    get:
      description: 경로 최적화 상태 조회
      operationId: getRouteOptimizationStatus
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/JobIdParam'
      responses:
        '200':
          $ref: '#/components/responses/RouteOptimizationStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/routes/optimization/{jobId}:
    delete:
      description: 경로 최적화 취소
      operationId: cancelRouteOptimization
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/JobIdParam'
      responses:
        '200':
          $ref: '#/components/responses/RouteOptimizationStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      description: 경로 최적화 job 저장 (이 기능이 왜 있는지 확인 필요)
      operationId: saveRouteOptimizationByJobId
      tags:
        - Route
      parameters:
        - $ref: '#/components/parameters/JobIdParam'
      responses:
        '200':
          $ref: '#/components/responses/RouteOptimizationStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/orders/{orderId}:
    get:
      description: 주문 조회
      operationId: getOrder
      tags:
        - Order
      parameters:
        - $ref: '#/components/parameters/OrderIdParam'
      responses:
        '200':
          $ref: '#/components/responses/OrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/orders:
    get:
      description: 주문 조회
      operationId: listOrders
      tags:
        - Order
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/UserIdParam'
        - $ref: '#/components/parameters/OrderNumberParam'
        - $ref: '#/components/parameters/DeliveryStatusParam'
        - $ref: '#/components/parameters/DispatchStatusParam'
        - $ref: '#/components/parameters/CustomerNameParam'
        - $ref: '#/components/parameters/ItemNameParam'
        - $ref: '#/components/parameters/LogisticsCenterIdParam'
        - $ref: '#/components/parameters/OrderedAtStartParam'
        - $ref: '#/components/parameters/OrderedAtEndParam'
        - $ref: '#/components/parameters/PreferredDateStartParam'
        - $ref: '#/components/parameters/PreferredDateEndParam'
        - $ref: '#/components/parameters/DeliveredAtStartParam'
        - $ref: '#/components/parameters/DeliveredAtEndParam'
      responses:
        '200':
          $ref: '#/components/responses/OrderListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      description: 주문 생성
      operationId: createOrder
      tags:
        - Order
      requestBody:
        $ref: '#/components/requestBodies/OrderRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      description: 주문 수정
      operationId: updateOrder
      tags:
        - Order
      requestBody:
        $ref: '#/components/requestBodies/OrderRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      description: 주문 상태 변경
      operationId: updateOrderStatus
      tags:
        - Order
      requestBody:
        $ref: '#/components/requestBodies/OrderStatusRequest'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      description: 주문 삭제
      operationId: deleteOrder
      tags:
        - Order
      parameters:
        - $ref: '#/components/parameters/OrderIdsParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/logistics-centers:
    get:
      description: 물류센터 조회
      operationId: listLogisticsCenters
      tags:
        - LogisticsCenter
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          $ref: '#/components/responses/LogisticsCenterListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      description: 물류센터 생성
      operationId: createLogisticsCenter
      tags:
        - LogisticsCenter
      requestBody:
        $ref: '#/components/requestBodies/LogisticsCenterRequest'
      responses:
        '200':
          $ref: '#/components/responses/CreateLogisticsCenterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      description: 물류센터 전체 삭제
      operationId: deleteAllLogisticsCenters
      tags:
        - LogisticsCenter
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/customers:
    get:
      description: 고객 조회
      operationId: listCustomers
      tags:
        - Customer
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          $ref: '#/components/responses/CustomerListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      description: 고객 등록
      operationId: registerMember
      tags:
        - Customer
      requestBody:
        $ref: '#/components/requestBodies/CustomerRequest'
      responses:
        '200':
          $ref: '#/components/responses/CreateCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      description: 고객 전체 삭제
      operationId: deleteAllCustomers
      tags:
        - Customer
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/drivers:
    get:
      description: 운전자 조회
      operationId: listDrivers
      tags:
        - Driver
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/DriverNameParam'
      responses:
        '200':
          $ref: '#/components/responses/DriverListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      description: 운전자 등록
      operationId: registerDriver
      tags:
        - Driver
      requestBody:
        $ref: '#/components/requestBodies/DriverRequest'
      responses:
        '200':
          $ref: '#/components/responses/CreateDriverResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      description: 운전자 전체 삭제
      operationId: deleteAllDrivers
      tags:
        - Driver
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/drivers/invite:
    post:
      description: 운전자 초대
      operationId: inviteDriver
      tags:
        - Driver
      requestBody:
        $ref: '#/components/requestBodies/InviteDriverRequest'
      responses:
        '200':
          $ref: '#/components/responses/InviteDriverResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/auth/login:
    post:
      description: 사용자 로그인
      operationId: login
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/auth/logout: # TO-DO: 로그아웃은 POST로 해야하는지 확인 필요
    get:
      description: 사용자 로그아웃
      operationId: logout
      tags:
        - Auth
      responses:
        '200':
          $ref: '#/components/responses/LogoutResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/auth/send-verification-code:
    post:
      description: 사용자 정보 유효성 확인 코드 발송
      operationId: sendVerificationCode
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/SendVerificationCodeRequest'
      responses:
        '200':
          $ref: '#/components/responses/SendVerificationCodeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/auth/verify-code:
    post:
      description: 사용자 정보 확인 코드 유효성 검사
      operationId: verifyCode
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/VerifyCodeRequest'
      responses:
        '200':
          $ref: '#/components/responses/VerifyCodeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/user/signup:
    post:
      description: 사용자 등록
      operationId: signup
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/SignupRequest'
      responses:
        '200':
          $ref: '#/components/responses/SignupResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/user/withdrawal:
    post:
      description: 사용자 탈퇴
      operationId: withdrawal
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/WithdrawalResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/user/password/reset:
    post:
      description: 비밀번호 초기화
      operationId: resetPassword
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/ResetPasswordRequest'
      responses:
        '200':
          $ref: '#/components/responses/ResetPasswordResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/user/password/search:
    post:
      description: 비밀번호 찾기
      operationId: searchPassword
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/SearchPasswordRequest'
      responses:
        '200':
          $ref: '#/components/responses/SearchPasswordResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'



components:
  schemas:
    #----------------------------------------
    # API fields
    #----------------------------------------
    Long:
      type: integer
      format: int64
      example: 1

    Integer:
      type: integer
      format: int32
      example: 1

    Float:
      type: number
      format: float
      example: 1.5

    Double:
      type: number
      format: double
      example: 1.5

    Boolean:
      description: 참, 거짓
      type: boolean
      example: true

    DateTime:
      description: ISO 8601 포멧의 일시 (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
      type: string
      format: date-time
      example: "2024-10-01T10:00:00.000Z"

    StartDateTime:
      description: ISO 8601 포멧의 시작 일시 (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
      type: string
      format: date-time
      example: "2024-10-01T10:00:00.000Z"

    EndDateTime:
      description: ISO 8601 포멧의 종료 일시 (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
      type: string
      format: date-time
      example: "2024-10-01T10:00:00.000Z"

    Date:
      type: string
      format: date
      example: "2024-10-01"

    String:
      type: string
      example: "foo"

    Password:
      type: string
      description: Password must contain at least one uppercase letter, one special character, and one digit.
      minLength: 8
      maxLength: 32
      pattern: "^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*]).+$"
      example: "P@ssw0rd!"

    UUID:
      type: string
      format: uuid
      example: c9106593-2d6c-40eb-8504-66b0ef41ad2d

    Email:
      type: string
      format: email
      description: "User's email address"
      example: "user@example.com"

    #----------------------------------------
    # Common Model
    #----------------------------------------

    LongArray:
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/Long'

    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          example: oaasis/constraint-violation
        title:
          type: string
          example: 제출한 요청이 유효하지 않습니다
        detail:
          type: string
        fieldErrors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/FieldError'

    FieldError:
      type: object
      properties:
        field:
          type: string
        message:
          $ref: '#/components/schemas/ErrorCode'

    ErrorCode:
      type: string
      example:
        - NotNull
        - Size

    Page:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
          default: 1
          example: 1
        pageSize:
          type: integer
          format: int32
          default: 20
          example: 20
        totalElements:
          type: integer
          format: int64
          example: 100
        totalPages:
          type: integer
          format: int32
          example: 100

    AbstractResponse:
      type: object
      properties:
        result:
          type: string
          description: 결과 [ok, fail]
          example: ok
        message:
          type: string
          description: 결과 메시지
          example: "성공"

    Coordinate:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      required:
        - latitude
        - longitude

    CoordinatePair:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
        format: double
      example: [ 127.065326637295, 37.5065841136869 ]

    GeometryType:
      type: string
      enum: [ Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection ]
      example: Point

    GeoJsonFeature:
      type: object
      description: GeoJSON Root Object
      properties:
        type:
          type: string
          default: 'Feature'
          readOnly: true
        geometry:
          $ref: "#/components/schemas/Geometry"
        properties:
          type: object
          additionalProperties:
            type: object

    Geometry:
      type: object
      description: GeoJSON Geometry
      oneOf:
        - $ref: '#/components/schemas/Point'
        - $ref: '#/components/schemas/MultiPoint'
        - $ref: '#/components/schemas/LineString'
        - $ref: '#/components/schemas/MultiLineString'
        - $ref: '#/components/schemas/Polygon'
        - $ref: '#/components/schemas/MultiPolygon'
        - $ref: '#/components/schemas/GeometryCollection'
      discriminator:
        propertyName: type

    Point:
      type: object
      description: 'GeometryType: Point'
      properties:
        type:
          type: string
          default: Point
          readOnly: true
        coordinates:
          $ref: '#/components/schemas/CoordinatePair'
      required: [ type, coordinates ]

    MultiPoint:
      type: object
      description: 'GeometryType: MultiPoint'
      properties:
        type:
          type: string
          default: MultiPoint
          readOnly: true
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/CoordinatePair'
          example: [ [ 127.065326637295, 37.5065841136869 ], [ 127.066558844809, 37.5086088846187 ] ]
      required: [ type, coordinates ]

    LineString:
      type: object
      description: 'GeometryType: LineString'
      properties:
        type:
          type: string
          default: LineString
          readOnly: true
        coordinates:
          type: array
          minItems: 2
          items:
            $ref: '#/components/schemas/CoordinatePair'
          example: [ [ 127.065326637295, 37.5065841136869 ], [ 127.066558844809, 37.5086088846187 ] ]
      required: [ type, coordinates ]

    MultiLineString:
      type: object
      description: 'GeometryType: MultiLineString'
      properties:
        type:
          type: string
          default: MultiLineString
          readOnly: true
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              $ref: '#/components/schemas/CoordinatePair'
          example: [ [ [ 127.065326637295, 37.5065841136869 ], [ 127.066558844809, 37.5086088846187 ] ], [ [ 127.065327020175, 37.4974180026259 ], [ 127.060358414855, 37.4936757916501 ] ] ]
      required: [ type, coordinates ]

    Polygon:
      type: object
      description: 'GeometryType: Polygon'
      properties:
        type:
          type: string
          default: Polygon
          readOnly: true
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              $ref: '#/components/schemas/CoordinatePair'
          example: [ [ [ 127.065326637295, 37.5065841136869 ], [ 127.066558844809, 37.5086088846187 ], [ 127.065327020175, 37.4974180026259 ], [ 127.060358414855, 37.4936757916501 ] ] ]
      required: [ type, coordinates ]

    MultiPolygon:
      type: object
      description: 'GeometryType: MultiPolygon'
      properties:
        type:
          type: string
          default: MultiPolygon
          readOnly: true
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              minItems: 4
              items:
                $ref: '#/components/schemas/CoordinatePair'
          example: [ [ [ [ 127.065326637295, 37.5065841136869 ], [ 127.066558844809, 37.5086088846187 ], [ 127.065327020175, 37.4974180026259 ], [ 127.060358414855, 37.4936757916501 ] ] ] ]
      required: [ type, coordinates ]

    GeometryCollection:
      type: object
      description: 'GeometryType: GeometryCollection'
      properties:
        type:
          type: string
          default: GeometryCollection
          readOnly: true
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'
      required: [ type, geometries ]

    #----------------------------------------
    # API Model
    #----------------------------------------

    DateDuration:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/StartDateTime'
        endDate:
          $ref: '#/components/schemas/EndDateTime'

    User:
      type: object
      description: 사용자 정보
      properties:
        id:
          type: integer
          format: int64
          example: 1
        loginId:
          type: string
          example: "user123"
        username:
          type: string
          example: "JohnDoe"
        password:
          $ref: '#/components/schemas/Password'
        email:
          $ref: '#/components/schemas/Email'
        company:
          type: string
          example: "ExampleCorp"
        businessRegistrationNumber:
          type: string
          example: "1234567890"
        policy:
          type: string
          example: "default"
        ipAddr:
          type: string
          example: "192.168.1.1"
        lastLoggedInAt:
          $ref: '#/components/schemas/DateTime'
        createdAt:
          $ref: '#/components/schemas/DateTime'
        lastModifiedAt:
          $ref: '#/components/schemas/DateTime'
    #        drivers:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/Driver'
    #        customers:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/Customer'
    #        logisticsCenters:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/LogisticsCenter'
    #        orders:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/Order'
    #        userRole:
    #          $ref: '#/components/schemas/UserRole'

    UserHistory:
      type: object
      properties:
        contents:
          type: string
        memo:
          type: string
        ipAddr:
          type: string
        createdAt:
          type: string
          format: date-time

    Driver:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John Doe"
        phoneNumber:
          type: string
          example: "010-2345-6789"
        address:
          type: string
          example: "123 Main St"
        address2:
          type: string
          example: "Apt 4B"
        modelName:
          type: string
          example: "Toyota Prius"
        maxCapacity:
          type: integer
          example: 4
        workStartTime:
          type: string
          format: time
          example: "08:00:00"
        workEndTime:
          type: string
          format: time
          example: "17:00:00"
        note:
          type: string
          example: "Experienced driver"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T10:00:00.000Z"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00.000Z"
        user:
          $ref: '#/components/schemas/User'
    #        logisticsCenters:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/LogisticsCenter'
    #        areas:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/Area'
    #        routeOrders:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/RouteOrder'

    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Jane Doe"
        phoneNumber:
          type: string
          example: "+1234567890"
        vehicleType:
          type: string
          example: "Van"
        maxLoad:
          type: integer
          example: 1000
        availableFrom:
          type: string
          format: time
          example: "09:00:00"
        availableUntil:
          type: string
          format: time
          example: "18:00:00"
        note:
          type: string
          example: "Reliable customer"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T10:00:00.000Z"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00.000Z"
    #        user:
    #          $ref: '#/components/schemas/User'
    #        logisticsCenters:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/LogisticsCenter'
    #        areas:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/Area'
    #        deliveries:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/Delivery'

    Route:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Route A"
        jobId:
          type: string
          example: "JOB123"
        isTemporary:
          type: integer
          default: 1
          example: 1
        inputDeliveryStartTime:
          type: string
          format: date-time
          example: "2023-10-01T10:00:00.000Z"
        objectiveFunctionOptions:
          type: integer
          example: 2
        distance:
          type: number
          format: float
          example: 15.5
        deliveryTime:
          type: number
          format: float
          example: 30.0
        waitingTime:
          type: number
          format: float
          example: 5.0
        constraintOptions:
          type: integer
          example: 3
        timeLimitOptions:
          type: integer
          example: 4
        timeLimit:
          type: integer
          example: 60
        logisticsCenterIds:
          type: string
          example: "LC123,LC456"
        orderIds:
          type: string
          example: "ORD123,ORD456"
        driverIds:
          type: string
          example: "DRV123,DRV456"
        outputDeliveryStartTime:
          type: string
          format: date-time
          example: "2023-10-01T11:00:00.000Z"
        outputDeliveryCompletionTime:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00.000Z"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T09:00:00.000Z"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-10-01T10:30:00.000Z"
        inputJson:
          type: string
          example: "{\"key\":\"value\"}"
        outputJson:
          type: string
          example: "{\"key\":\"value\"}"
        user:
          $ref: '#/components/schemas/User'
    #        routeOrders:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/RouteOrder'
    #        routeDrivers:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/RouteDriver'
    #        routeLogisticsCenters:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/RouteLogisticsCenter'
    UserRole:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        role:
          type: integer
          example: 2
        type1:
          type: integer
          example: 1
        type2:
          type: integer
          example: 2
        type3:
          type: integer
          example: 3
        createdAt:
          type: string
          format: date-time
          example: "2023-10-01T10:00:00.000Z"
        lastModifiedAt:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00.000Z"
    #        user:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/User'

    DeliveryStatus:
      type: string
      enum: [ 'READY', 'IN_TRANSIT', 'DELIVERED', 'FAILED' ]
      example: 'READY'

    DispatchStatus:
      type: string
      enum: [ 'PENDING', 'DISPATCHED', 'FAILED' ]
      example: 'PENDING'

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        deliveryStatus:
          $ref: '#/components/schemas/DeliveryStatus'
        dispatchStatus:
          $ref: '#/components/schemas/DispatchStatus'
        orderedAt:
          $ref: '#/components/schemas/DateTime'
        orderNumber:
          type: string
        destAddress:
          type: string
        destAddress2:
          type: string
        point:
          type: object
          properties:
            type:
              type: string
              example: Point
            coordinates:
              $ref: '#/components/schemas/CoordinatePair'
        itemName:
          type: string
        itemVolume:
          type: integer
        itemCount:
          type: integer
        preferredDate:
          type: string
          format: date
        preferredStartTime:
          type: string
          format: time
        preferredEndTime:
          type: string
          format: time
        serviceDuration:
          type: integer
          default: 5
        demandMemo:
          type: string
        deliveredAt:
          $ref: '#/components/schemas/DateTime'
        createdAt:
          $ref: '#/components/schemas/DateTime'
        lastModifiedAt:
          $ref: '#/components/schemas/DateTime'
        user:
          $ref: '#/components/schemas/User'
        customer:
          $ref: '#/components/schemas/Customer'
        driver:
          $ref: '#/components/schemas/Driver'
        logisticsCenter:
          $ref: '#/components/schemas/LogisticsCenter'
        routeOrder:
          $ref: '#/components/schemas/RouteOrder'
      required:
        - orderDate
        - destAddress
        - itemName
        - itemVolume
        - itemCount
        - preferredDate
        - preferredStartTime
        - preferredEndTime
        - serviceDuration

    LogisticsCenter:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
        address2:
          type: string
        memo:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
              example: Point
            coordinates:
              type: array
              items:
                type: number
                format: double
        createdAt:
          type: string
          format: date-time
        lastModifiedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        customers:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        drivers:
          type: array
          items:
            $ref: '#/components/schemas/Driver'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        routeOrders:
          type: array
          items:
            $ref: '#/components/schemas/RouteOrder'
        routeDrivers:
          type: array
          items:
            $ref: '#/components/schemas/RouteDriver'
        routeLogisticsCenters:
          type: array
          items:
            $ref: '#/components/schemas/RouteLogisticsCenter'
      required:
        - id
        - name
        - address
        - location
        - createdAt
        - lastModifiedAt

    LogisticsCenterSimple:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Logistics Center A"
        address:
          type: string
          example: "대전광역시 유성구 문지로 193"
        location:
          $ref: '#/components/schemas/Coordinate'
      required:
        - id
        - name
        - address
        - location

    RouteLogisticsCenter:
      type: object
      properties:
        id:
          type: integer
          format: int64
        distance:
          type: number
          format: float
        co2Emission:
          type: number
          format: float
        deliveryCompletionTime:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        lastModifiedAt:
          type: string
          format: date-time
        route:
          $ref: '#/components/schemas/Route'
        logisticsCenter:
          $ref: '#/components/schemas/LogisticsCenter'
      required:
        - id
        - createdAt
        - lastModifiedAt

    RouteOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
        driverDepartureTime:
          type: string
          format: date-time
        driverArrivalTime:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        lastModifiedAt:
          type: string
          format: date-time
        route:
          $ref: '#/components/schemas/Route'
        logisticsCenter:
          $ref: '#/components/schemas/LogisticsCenter'
        driver:
          $ref: '#/components/schemas/Driver'
        order:
          $ref: '#/components/schemas/Order'
      required:
        - id
        - createdAt
        - lastModifiedAt

    RouteDriver:
      type: object
      properties:
        id:
          type: integer
          format: int64
        distance:
          type: number
          format: float
        co2Emission:
          type: number
          format: float
        timeSpend:
          type: integer
        loadWeight:
          type: integer
        deliveryCompletionTime:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        lastModifiedAt:
          type: string
          format: date-time
        route:
          $ref: '#/components/schemas/Route'
        driver:
          $ref: '#/components/schemas/Driver'
        logisticsCenter:
          $ref: '#/components/schemas/LogisticsCenter'
      required:
        - id
        - createdAt
        - lastModifiedAt

    CustomerRequest:
      type: object
      description: Customer Data Transfer Object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the customer.
          example: 1
        userId:
          type: integer
          format: int64
          description: The user ID associated with the customer.
          example: 123
        name:
          type: string
          description: The name of the customer.
          example: "John Doe"
        contact:
          type: string
          description: The contact information of the customer.
          example: "555-1234"
        address:
          type: string
          description: The primary address of the customer.
          example: "123 Main St"
        address2:
          type: string
          description: The secondary address of the customer.
          example: "Apt 4B"
        parkingMemo:
          type: string
          description: Parking instructions or memo for the customer.
          example: "Park in the rear lot"
        condition:
          type: string
          description: The condition or status of the customer.
          example: "Active"
        eta:
          type: integer
          description: Estimated time of arrival in minutes.
          example: 15
        logisticsCenterName:
          type: string
          description: The name of the logistics center associated with the customer.
          example: "Main Warehouse"
        lat:
          type: number
          format: double
          description: The latitude coordinate of the customer.
          example: 37.7749
        lng:
          type: number
          format: double
          description: The longitude coordinate of the customer.
          example: -122.4194

    RouteOptimizationInput:
      type: object
      properties:
        orderIds:
          type: string
          description: Comma separated Order IDs
          example: "ORD123,ORD456"
        driverIds:
          type: string
          description: Comma separated Driver IDs
          example: "DRV123,DRV456"
        logisticsCenterIds:
          type: string
          description: Comma separated Logistics Center IDs
          example: "LC123,LC456"
        options:
          $ref: '#/components/schemas/RouteOptimizationInputOptions'

    RouteOptimizationInputOptions:
      type: object
      properties:
        driverTotalDistance:
          type: number
          format: double
          example: 10.5
        deliveryCompletionTime:
          type: number
          format: double
          example: 2.5
        customerWaitingTime:
          type: number
          format: double
          example: 1.0
        driverWorkTimeUniformity:
          type: boolean
          example: true
        driverWorkLoadUniformity:
          type: boolean
          example: true
        driverDeliveryZoneSatisfying:
          type: boolean
          example: true
        timeLimit:
          type: integer
          description: Time limit in seconds
          example: 30
        deliveryStartTime:
          $ref: '#/components/schemas/DateTime'
        name:
          type: string
          example: 'Sample Name'

    LogisticsCenterAssignedInfo:
      type: object
      properties:
        logisticsCenter:
          $ref: '#/components/schemas/LogisticsCenterSimple'
        driverWithAssignedOrders:
          type: array
          items:
            $ref: '#/components/schemas/DriverWithOrders'
      required:
        - logisticsCenter
        - driverWithAssignedOrders

    DriverWithOrders:
      type: object
      properties:
        driver:
          $ref: '#/components/schemas/Driver'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderSimple'
      required:
        - driver
        - orders

    OrderSimple:
      type: object
      properties:
        orderId:
          type: integer
        customerName:
          type: string
        destAddress:
          type: string
        destAddress2:
          type: string
        destLocation:
          $ref: '#/components/schemas/Coordinate'
        deliveryTime:
          type: integer
        logisticsCenterId:
          type: integer
        itemVolume:
          type: number
        preferredStartTime:
          type: string
          format: time
        preferredEndTime:
          type: string
          format: time
      required:
        - orderId
        - customerName
        - destAddress
        - destLocation
        - deliveryTime
        - itemVolume

    LogisticsCenterRequest:
      type: object
      description: Logistics Center 등록 수정 요청
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the logistics center.
          example: 1
        userId:
          type: integer
          format: int64
          description: 이 필드가 필요한지 확인 필요
          example: 123
        name:
          type: string
          description: The name of the logistics center.
          example: "Main Warehouse"
        address:
          type: string
          description: The primary address of the logistics center.
          example: "123 Main St"
        address2:
          type: string
          description: The secondary address of the logistics center.
          example: "Suite 100"
        memo:
          type: string
          description: Additional notes or memo about the logistics center.
          example: "Open 24/7"
        lat:
          type: number
          format: double
          description: The latitude coordinate of the logistics center.
          example: 37.7749
        lng:
          type: number
          format: double
          description: The longitude coordinate of the logistics center.
          example: -122.4194
        customerCount:
          type: integer
          description: The number of customers at the logistics center.
          example: 10
        driverCount:
          type: integer
          description: The number of drivers at the logistics center.
          example: 5

    DriverRequest:
      type: object
      description: Driver Data Transfer Object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the driver.
          example: 1
        userId:
          type: integer
          format: int64
          description: The user ID associated with the driver.
          example: 123
        name:
          type: string
          description: The name of the driver.
          example: "John Doe"
        phoneNumber:
          type: string
          description: The phone number of the driver.
          example: "555-1234"
        address:
          type: string
          description: The primary address of the driver.
          example: "123 Main St"
        address2:
          type: string
          description: The secondary address of the driver.
          example: "Apt 4B"
        modelName:
          type: string
          description: The model name of the driver's vehicle.
          example: "Toyota Prius"
        maxCapacity:
          type: integer
          description: The maximum capacity of the driver's vehicle.
          example: 4
        workStartTime:
          type: string
          format: time
          description: The start time of the driver's workday.
          example: "08:00:00"
        workEndTime:
          type: string
          format: time
          description: The end time of the driver's workday.
          example: "17:00:00"
        note:
          type: string
          description: Additional notes about the driver.
          example: "Experienced driver"
        logisticsCenterId:
          type: integer
          format: int64
          description: The logistics center ID associated with the driver.
          example: 10
        logisticsCenterName:
          type: string
          description: The name of the logistics center associated with the driver.
          example: "Main Warehouse"
        area:
          type: string
          description: The area where the driver operates.
          example: "Downtown"
        addressCode:
          type: string
          description: The address code where the driver operates.
          example: "12345"

    InviteDriverRequest:
      type: object
      description: Invite Driver Data Transfer Object
      properties:
        code:
          type: string
          description: The invite code to invite the driver.
          example: "x123456"

    SignupRequest:
      type: object
      description: Signup Data Transfer Object
      properties:
        loginId:
          type: string
          description: email or phone number.
          example: "johndoe"
        username:
          type: string
          description: The username of the user.
          example: "John Doe"
        password:
          $ref: '#/components/schemas/Password'
        phoneNumber:
          type: string
          description: The phone number of the user.
          example: "555-1234"
        email:
          $ref: '#/components/schemas/Email'
        policy:
          type: string
          description: The policy of the user.
          example: "default"
        organization:
          $ref: '#/components/schemas/Organization'
      required:
        - loginId
        - username
        - password

    ResetPasswordRequest:
      type: object
      description: Reset Password Data Transfer Object
      properties:
        loginId:
          type: string
          description: The login ID of the user.
          example: "johndoe"
        oldPassword:
          $ref: '#/components/schemas/Password'
        newPassword:
          $ref: '#/components/schemas/Password'
      required:
        - loginId
        - email

    SearchPasswordRequest:
      type: object
      description: Search Password Data Transfer Object
      properties:
        loginId:
          type: string
          description: The login ID of the user.
          example: "johndoe"
      required:
        - loginId

    SendVerificationCodeRequest:
      type: object
      description: Validate user data request object
      properties:
        loginId:
          type: string
          description: The login ID of the user.
          example: "johndoe"
        phoneNumber:
          type: string
          description: The phone number of the user.
          example: "555-1234"
        email:
          $ref: '#/components/schemas/Email'
      oneOf:
        - required: [ loginId, phoneNumber ]
        - required: [ loginId, email ]

    VerifyCodeRequest:
      type: object
      description: Validate user data request object
      properties:
        phoneNumber:
          type: string
          description: The phone number of the user.
          example: "555-1234"
        email:
          $ref: '#/components/schemas/Email'
        code:
          type: string
          description: The verification code.
          example: "123456"
      oneOf:
        - required: [ phoneNumber, code ]
        - required: [ email, code ]

    Organization:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "ExampleCorp"
        businessRegistrationNumber:
          type: string
          example: "1234567890"
        createdAt:
          $ref: '#/components/schemas/DateTime'
        lastModifiedAt:
          $ref: '#/components/schemas/DateTime'

    UserRoles:
      type: object
      properties:
        userRoles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'

    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'
            page:
              $ref: '#/components/schemas/Page'

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/User'

    RouteListResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Route'
            page:
              $ref: '#/components/schemas/Page'

    RouteOptimizationJobIdResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                jobId:
                  type: string
                  example: "JOB123"

    RouteOptimizationStatus:
      type: string
      enum: [ 'ACCEPTED', 'OPTIMIZING', 'OPTIMIZED', 'NOT_FOUND', 'ERROR' ]
      example: 'ACCEPTED'

    RouteOptimizationResult:
      type: object
      properties:
        jobId:
          type: string
          example: "JOB123"
        status:
          $ref: '#/components/schemas/RouteOptimizationStatus'
        message:
          type: string
          example: "Message"
        data:
          $ref: '#/components/schemas/SolverResult'

    SolverResult:
      type: object
      description: Routing Engine Result
      properties:
        userId:
          type: integer
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/LogisticsCenterAssignedInfo'
        deliveryStartTime:
          $ref: '#/components/schemas/DateTime'
      required:
        - user_id
        - results

    RouteOptimizationStatusResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RouteOptimizationResult'

    UserRoleListResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
            page:
              $ref: '#/components/schemas/Page'

    OrderResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Order'

    OrderListResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Order'
            page:
              $ref: '#/components/schemas/Page'

    CreateLogisticsCenterResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    LogisticsCenterListResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/LogisticsCenter'
            page:
              $ref: '#/components/schemas/Page'

    CreateCustomerResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    CustomerListResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Customer'
            page:
              $ref: '#/components/schemas/Page'

    CreateDriverResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    DriverListResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Driver'
            page:
              $ref: '#/components/schemas/Page'

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY0NzIwNjIwMCwiZXhwIjoxNjQ3MjA2MjAwfQ"

    LogoutResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    SignupResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    WithdrawalResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    ResetPasswordResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    SearchPasswordResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    SendVerificationCodeResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    VerifyCodeResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'

    InviteDriverResponse:
      allOf:
        - $ref: '#/components/schemas/AbstractResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                organization:
                  $ref: '#/components/schemas/Organization'
                name:
                  type: string
                  example: "John Doe"
                phoneNumber:
                  type: string
                  example: "555-1234"
                email:
                  $ref: '#/components/schemas/Email'



  parameters:
    PageParam:
      in: query
      name: page
      description: 페이지
      schema:
        type: integer
        format: int32
        default: 1

    SizeParam:
      in: query
      name: size
      description: 한 페이지에 노출되는 item 수
      schema:
        type: integer
        format: int32
        default: 1000

    DateParam:
      in: query
      name: date
      description: 조회 대상일 (yyyy-MM-dd)
      schema:
        $ref: '#/components/schemas/Date'

    StartDateTimeParam:
      in: query
      name: startDate
      description: 조회 대상 데이터 시작일 (2022-02-01T10:00:00Z)
      schema:
        $ref: '#/components/schemas/DateTime'

    EndDateTimeParam:
      in: query
      name: endDate
      description: 조회 대상 데이터 종료일 (2022-02-01T23:59:59Z)
      schema:
        $ref: '#/components/schemas/DateTime'

    VersionParam:
      in: header
      name: Accept
      description: API 버전
      required: true
      schema:
        type: string
        default: 'application/vnd.omelet.v2+json'

    UserIdParam:
      in: path
      name: userId
      required: true
      description: 사용자 식별자
      schema:
        $ref: '#/components/schemas/Long'

    LoginIdParam:
      in: query
      name: loginId
      description: 로그인 아이디
      schema:
        $ref: '#/components/schemas/String'

    UsernameParam:
      in: query
      name: username
      description: 사용자 이름
      schema:
        $ref: '#/components/schemas/String'

    BusinessNumberParam:
      in: query
      name: businessNumber
      description: 사업자 번호
      schema:
        $ref: '#/components/schemas/String'

    LevelParam:
      in: query
      name: level
      description: 사용자 레벨
      schema:
        $ref: '#/components/schemas/Integer'

    EmailParam:
      in: query
      name: email
      description: 이메일
      schema:
        $ref: '#/components/schemas/Email'

    RouteIdsParam:
      in: query
      name: routeIds
      description: Route 식별자 목록 (comma separated)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Long'
        example: '1,2,3'
      style: form
      explode: false

    OrderIdParam:
      in: path
      required: true
      name: orderId
      description: 주문 식별자
      schema:
        $ref: '#/components/schemas/Long'

    OrderIdsParam:
      in: query
      name: orderIds
      description: 주문 식별자 목록 (comma separated)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Long'
        example: '1,2,3'
      style: form
      explode: false

    OrderNumberParam:
      in: query
      name: orderNumber
      description: 주문 번호
      schema:
        $ref: '#/components/schemas/String'

    DeliveryStatusParam:
      in: query
      name: deliveryStatus
      description: 배송 상태
      schema:
        $ref: '#/components/schemas/DeliveryStatus'

    DispatchStatusParam:
      in: query
      name: dispatchStatus
      description: 배차 상태
      schema:
        $ref: '#/components/schemas/DispatchStatus'

    CustomerNameParam:
      in: query
      name: customerName
      description: 택배사 이름
      schema:
        $ref: '#/components/schemas/String'

    ItemNameParam:
      in: query
      name: itemName
      description: 품목명
      schema:
        $ref: '#/components/schemas/String'

    OrderedAtStartParam:
      in: query
      name: orderedAtStart
      description: 주문일시 시작
      schema:
        $ref: '#/components/schemas/DateTime'

    OrderedAtEndParam:
      in: query
      name: orderedAtEnd
      description: 주문일시 종료
      schema:
        $ref: '#/components/schemas/DateTime'

    PreferredDateStartParam:
      in: query
      name: preferredDateStart
      description: 배송 희망일 시작
      schema:
        $ref: '#/components/schemas/DateTime'

    PreferredDateEndParam:
      in: query
      name: preferredDateEnd
      description: 배송 희망일 종료
      schema:
        $ref: '#/components/schemas/DateTime'

    DeliveredAtStartParam:
      in: query
      name: deliveredAtStart
      description: 배송 완료일시 시작
      schema:
        $ref: '#/components/schemas/DateTime'

    DeliveredAtEndParam:
      in: query
      name: deliveredAtEnd
      description: 배송 완료일시 종료
      schema:
        $ref: '#/components/schemas/DateTime'

    LogisticsCenterIdParam:
      in: query
      name: logisticsCenterId
      description: 물류센터 ID
      schema:
        $ref: '#/components/schemas/Long'

    JobIdParam:
      in: query
      name: jobId
      description: 경로 최적화 Job ID
      schema:
        type: string
        example: "JOB123"

    LogisticsCenterIdsParam:
      in: query
      name: logisticsCenterIds
      description: 물류센터 ID 목록 (comma separated)
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Long'
        example: '1,2,3'
      style: form
      explode: false

    DriverNameParam:
      in: query
      name: driverName
      description: 운전자 이름
      schema:
        $ref: '#/components/schemas/String'



  requestBodies:

    OrderRequest:
      description: 주문 단건, 다건 생성, 수정 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/Order'
        'application/vnd.omelet.v2+vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          schema:
            type: string
            format: binary

    LogisticsCenterRequest:
      description: 물류 센터 단건, 다건 생성, 수정 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/LogisticsCenterRequest'
        'application/vnd.omelet.v2+vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          schema:
            type: string
            format: binary

    CustomerRequest:
      description: 고객 단건, 다건 생성, 수정 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/CustomerRequest'
        'application/vnd.omelet.v2+vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          schema:
            type: string
            format: binary

    DriverRequest:
      description: 운전자 단건, 다건 생성, 수정 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/DriverRequest'
        'application/vnd.omelet.v2+vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          schema:
            type: string
            format: binary

    UserRequest:
      description: 사용자 생성, 수정 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/User'

    UserRolesRequest:
      description: 사용자 권한 생성, 수정 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/UserRoles'

    OrderStatusRequest:
      description: 주문 상태 변경 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            type: object
            properties:
              deliveryStatus:
                $ref: '#/components/schemas/DeliveryStatus'
              dispatchStatus:
                $ref: '#/components/schemas/DispatchStatus'
            required:
              - deliveryStatus
              - dispatchStatus
        'application/vnd.omelet.v2+vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          schema:
            type: string
            format: binary

    RouteOptimizationRequest:
      description: 경로 최적화 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/RouteOptimizationInput'

    LoginRequest:
      description: 로그인 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            type: object
            properties:
              loginId:
                $ref: '#/components/schemas/String'
              password:
                $ref: '#/components/schemas/Password'
            required:
              - loginId
              - password

    SignupRequest:
      description: 회원가입 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/SignupRequest'

    ResetPasswordRequest:
      description: 비밀번호 재설정 요청 Object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/ResetPasswordRequest'

    SearchPasswordRequest:
      description: 비밀번호 찾기 요청 object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/SearchPasswordRequest'

    SendVerificationCodeRequest:
      description: 인증 코드 전송 요청 object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/SendVerificationCodeRequest'

    VerifyCodeRequest:
      description: 인증 코드 검증 요청 object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/VerifyCodeRequest'

    InviteDriverRequest:
      description: 운전자 초대 요청 object
      required: true
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/InviteDriverRequest'



  responses:

    Created:
      description: Created

    Accepted:
      description: Accepted

    NoContent:
      description: No Content

    EmptyContent:
      description: No Content
      content:
        'application/vnd.omelet.v2+json': { }

    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    ServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    UserListResponse:
      description: 사용자 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/UserListResponse'

    UserResponse:
      description: 사용자 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/UserResponse'

    RouteListResponse:
      description: 경로 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/RouteListResponse'

    RouteOptimizationJobIdResponse:
      description: 경로 최적화 Job ID 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/RouteOptimizationJobIdResponse'

    RouteOptimizationStatusResponse:
      description: 경로 최적화 Job 상태 응답. 완료 상태일 경우 최적화 결과를 포함한다.
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/RouteOptimizationStatusResponse'

    UserRoleListResponse:
      description: 사용자 권한 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/UserRoleListResponse'

    OrderListResponse:
      description: 주문 목록 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/OrderListResponse'

    OrderResponse:
      description: 주문 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/OrderResponse'

    CreateLogisticsCenterResponse:
      description: 물류센터 등록 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/CreateLogisticsCenterResponse'

    LogisticsCenterListResponse:
      description: 물류센터 목록 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/LogisticsCenterListResponse'

    CreateCustomerResponse:
      description: 고객 목록 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/CreateCustomerResponse'

    CustomerListResponse:
      description: 고객 목록 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/CustomerListResponse'

    CreateDriverResponse:
      description: 운전자 생성 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/CreateDriverResponse'

    DriverListResponse:
      description: 운전자 목록 조회 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/DriverListResponse'

    LoginResponse:
      description: 로그인 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/LoginResponse'

    LogoutResponse:
      description: 로그아웃 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/LogoutResponse'

    SignupResponse:
      description: 회원가입 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/SignupResponse'

    WithdrawalResponse:
      description: 회원탈퇴 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/WithdrawalResponse'

    ResetPasswordResponse:
      description: 비밀번호 초기화 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/ResetPasswordResponse'

    SearchPasswordResponse:
      description: 비밀번호 찾기 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/SearchPasswordResponse'

    SendVerificationCodeResponse:
      description: 인증 코드 전송 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/SendVerificationCodeResponse'

    VerifyCodeResponse:
      description: 인증 코드 검증 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/VerifyCodeResponse'

    InviteDriverResponse:
      description: 운전자 초대 응답
      content:
        'application/vnd.omelet.v2+json':
          schema:
            $ref: '#/components/schemas/InviteDriverResponse'



  securitySchemes:
    jwtTokenAuthentication:
      type: http
      scheme: bearer
      bearerFormat: JWT



security:
  - jwtTokenAuthentication: [ ]
